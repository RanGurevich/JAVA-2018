
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.Random;

public class LifeGame extends JApplet implements ActionListener {

    private Container c;
    private JTextArea displayBoard;  // display board
    private JButton nextGeneration; // button to generate next generation
    int[][] cells = new int[9999][9999];   	// The matrix board
    int userLine, userRows = 0;           	// The index of matrix that user has been typed
              	//  This varable helps to do caculating while running
    int yesNo;                          	//used when the matrix has no more changes
    int[][] cellsBefore = new int[9999][9999];

    @Override
    public void init() {     // Applet init() method
        // set layout manager
        c = getContentPane();
        c.setLayout(new BorderLayout());

        // setup components
        displayBoard = new JTextArea();
        nextGeneration = new JButton("Next generation");
        nextGeneration.addActionListener(this);

        // add components to applet
        c.add(displayBoard, BorderLayout.CENTER);
        c.add(nextGeneration, BorderLayout.SOUTH);
        gameStart();
    }

    public void displayLife() {
        showChanges();
    }

    // implementation of ActionListener interface
    @Override
    public void actionPerformed(ActionEvent e) {
        generateNextGeneration();
        displayLife();
    }

    public void generateNextGeneration() {
        SetInBefore();
        MakeChanges();
        showChanges();
        if (checkChange()) {
            yesNo = (JOptionPane.showConfirmDialog(null, "There is no more changes, restart?", "What's now?",
                     JOptionPane.YES_NO_OPTION));
            if (yesNo == JOptionPane.YES_OPTION) {
                gameStart();
            }

        }
    }

    public void gameStart() {
        String rows, columns;
        rows = JOptionPane.showInputDialog("Enter how many lines: ");
        columns = JOptionPane.showInputDialog("Enter how many columns: ");
        userLine = Integer.parseInt(rows);
        userRows = Integer.parseInt(columns);

        int randomNum;
        String MatrixText = "";
        for (int i = 0; i < userLine; i++) {
            for (int j = 0; j < userRows; j++) {

                cells[i][j] =randomCellValue();

            }
        }
        showChanges();

    }

    public int randomCellValue() {
        Random rnd = new Random();
        int randomNum = rnd.nextInt(2);
        return randomNum;
    }

    public void showChanges() {
        String MatrixText = "";
        for (int i = 0; i < userLine; i++) {
            for (int j = 0; j < userRows; j++) {
                if (cells[i][j] == 1) {
                    MatrixText += "+ |";
                } else {
                    MatrixText += " - |";
                }
            }
            MatrixText += "\n";
        }
        displayBoard.setText(MatrixText);
    }

    public void MakeChanges() {
        for (int i = 0; i < userLine; i++) {
            for (int j = 0; j < userRows; j++) {
                // מס' שכנים =  מנה את השכנים של תא זה
                // על פי מספר השכנים  קבע את מצבו של התא בדור הבא.
             if(cellsBefore[i][j]==0 && checkAliveCells(i, j)==3)
             {
                 cells[i][j]=1;
             }
             else
             {
             if(cellsBefore[i][j]==1 && checkAliveCells(i, j)<=1 || checkAliveCells(i, j)>=4)
             {
                 cells[i][j]=0;
             }
             }
            }
        }
    }


    public void SetInBefore() {
        for (int i = 0; i < userLine; i++) {
            for (int j = 0; j < userRows; j++) {
                cellsBefore[i][j] = cells[i][j];
            }
        }
    }

    public boolean checkChange() {
        for (int i = 0; i < userLine; i++) {
            for (int j = 0; j < userRows; j++) {
                if (cellsBefore[i][j] != cells[i][j]) {
                    return false;
                }
            }
        }
        return true;
    }


    public int checkAliveCells(int lineX, int rowY)
{
    int count =0;
int startLine = (lineX==0) ? 0:lineX-1;
int endLine = (lineX+1==userRows) ? userRows-1:lineX+1;
int startRow =(rowY==0)? 0:rowY-1;
int endRow= (rowY+1==userRows)?userRows-1:rowY+1;
    for ( int i = startLine; i <= endLine; i++) {
        for (int j = startRow; j <= endRow; j++) {
            if (cellsBefore[i][j]==1) {
                count++;
            }
        }
    }
    if (cellsBefore[lineX][rowY]==1) {
        count--;
    }
    return count;
}
}
